sudo apt update && sudo apt upgrade -y
sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io
docker --version
mkdir myapp && cd myapp
nano app.py



content:

from flask import Flask, request, jsonify

app = Flask(__name__)

# Mock database (in-memory)
students = {}

@app.route('/students', methods=['GET'])
def get_all_students():
    return jsonify(students)

@app.route('/students/<int:id>', methods=['GET'])
def get_student(id):
    student = students.get(id)
    if not student:
        return jsonify({"error": "Student not found"}), 404
    return jsonify(student)

@app.route('/students', methods=['POST'])
def add_student():
    data = request.json
    id = data.get("id")
    if id in students:
        return jsonify({"error": "Student ID already exists"}), 400
    students[id] = {
        "name": data.get("name"),
        "age": data.get("age"),
        "grade": data.get("grade")
    }
    return jsonify({"message": "Student added successfully"}), 201

@app.route('/students/<int:id>', methods=['PUT'])
def update_student(id):
    if id not in students:
        return jsonify({"error": "Student not found"}), 404
    data = request.json
    students[id].update({
        "name": data.get("name", students[id]["name"]),
        "age": data.get("age", students[id]["age"]),
        "grade": data.get("grade", students[id]["grade"])
    })
    return jsonify({"message": "Student updated successfully"})

@app.route('/students/<int:id>', methods=['DELETE'])
def delete_student(id):
    if id not in students:
        return jsonify({"error": "Student not found"}), 404
    del students[id]
    return jsonify({"message": "Student deleted successfully"})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)



(ctrl o,enter ,ctrl z)


nano requirements.txt

content :

Flask

nano Dockerfile

content :

# Use an official Python runtime as a base image
FROM python:3.9-slim

# Set the working directory
WORKDIR /app

# Copy application files
COPY . /app

# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Expose the application port
EXPOSE 5000

# Define the command to run the app
CMD ["python", "app.py"]

*********
docker build -t student-management-app .
docker run -d -p 5000:5000 student-management-app
*********
add:

curl -X POST http://localhost:5000/students \
-H "Content-Type: application/json" \
-d '{"id": 1, "name": "John Doe", "age": 20, "grade": "A"}'

*******

get:

curl http://localhost:5000/students

********

update :

curl -X PUT http://localhost:5000/students/1 \
-H "Content-Type: application/json" \
-d '{"name": "John Smith", "age": 21, "grade": "A+"}'

*******

delete:

curl -X DELETE http://localhost:5000/students/1

********









prg 2:


nano sum.py

n=int(input("Enter n: "))
result=sum(range(1,n+1))
print(f"Sum of 1 to {n}: {result}")

nano Dockerfile 	#file name must be "Dockerfile"

from python:3.9
copy sum.py /sum.py
cmd ["python3", "/sum.py"]

sudo docker build -t sum_image .
sudo docker run -it sum_image


prg 3:


nano app.py


from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/')
def home():
    return '''
        <form action="/calculate" method="post">
            <label for="n">Enter n:</label>
            <input type="number" id="n" name="n">
            <button type="submit">Calculate Sum</button>
        </form>
    '''

@app.route('/calculate', methods=['POST'])
def calculate():
    try:
        n = int(request.form.get('n', 0))
        result = sum(range(1, n + 1))
        return jsonify({"n": n, "sum": result})
    except Exception as e:
        return jsonify({"error": str(e)})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)




nano Dockerfile

from python:3.9
WORKDIR /app
COPY app.py /app/app.py
RUN pip install flask
CMD ["python3", "app.py"]



sudo docker build -t flask_sum_app .

sudo docker run -d -p 5000:5000 flask_sum_app

https://localhost:5000




suji and sathya steps :



sudo apt get-update
sudo apt install docker.io
sudo systemctl enable docker
sudo systemctl status docker
mkdir proj
cd proj
nano index.html(write any html content here)
nano Dockerfile
   Type these 4 lines of code into dockerfile and save it
     FROM nginx:latest
    COPY  . /usr/share/nginx/html
     EXPOSE 80
     CMD  ["nginx", "-g" ,"daemon off;"]


Again in terminal

docker build -t sample .
docker run -d -p 8080:80 sample


Then go to browser

http://localhost:8080


*********


search firebase console
sign in
create project
disable google analytics
build -> hosting
get started 
next->next->continue to console
project overview ->settings
</>
app name -> register
copy the cofiguration and paste it in config.js in public folder


index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home Retail App</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body ng-app="retailApp" ng-controller="MainController">
    <div class="container">
        <h1>Home Retail Management</h1>
        
        <h2>Products</h2>
        <ul id="product-list">
            <li ng-repeat="product in products">
                {{product.name}} - {{product.description}} - Rating: {{product.rating}} - Price: {{product.price}} - Quantity: {{product.quantity}}
                <button ng-click="deleteProduct($index)">Delete</button>
            </li>
        </ul>
        
        <h2>Add Product</h2>
        <form id="product-form" ng-submit="addProduct()">
            <input type="text" id="name" ng-model="newProduct.name" placeholder="Name" required>
            <input type="text" id="description" ng-model="newProduct.description" placeholder="Description" required>
            <input type="number" id="rating" ng-model="newProduct.rating" placeholder="Rating" required>
            <input type="number" id="price" ng-model="newProduct.price" placeholder="Price" required>
            <input type="number" id="quantity" ng-model="newProduct.quantity" placeholder="Quantity" required>
            <button type="submit">Add Product</button>
        </form>
    </div>

    <!-- AngularJS library -->
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
    
    <!-- Script to manage the app -->
    <script>
        var app = angular.module('retailApp', []);

        app.controller('MainController', function($scope) {
            $scope.products = []; // Initialize the product list
            $scope.newProduct = {}; // Initialize the new product object

            // Add a new product to the in-memory list
            $scope.addProduct = function() {
                $scope.products.push({
                    name: $scope.newProduct.name,
                    description: $scope.newProduct.description,
                    rating: $scope.newProduct.rating,
                    price: $scope.newProduct.price,
                    quantity: $scope.newProduct.quantity
                });
                $scope.newProduct = {}; // Clear the form after adding a product
            };

            // Delete a product from the in-memory list
            $scope.deleteProduct = function(index) {
                $scope.products.splice(index, 1);
            };
        });
    </script>
</body>
</html>


config.js:
// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyC5Bl1aSwFq2e27cSvK0GjOuh7rs0dZ03U",
  authDomain: "modellab0919.firebaseapp.com",
  projectId: "modellab0919",
  storageBucket: "modellab0919.appspot.com",
  messagingSenderId: "119451714163",
  appId: "1:119451714163:web:653b4baf8a47fb823e2006"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);


open the command prompt
npm -g install firebase-tools
firebase â€“-version
firebase login
firebase init -> yes,public,nooooo,hosting,use an existing...
firebase deploy

from flask import Flask, render_template

app = Flask(__name__)

@app.route("/")
def home():
    return render_template("index.html")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flask Docker App</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <div class="container">
        <h1>Welcome to Flask Docker App</h1>
        <p>This is a sample web page served using Flask and Docker.</p>
    </div>
</body>
</html>
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f9;
    margin: 0;
    padding: 0;
}

.container {
    text-align: center;
    margin-top: 50px;
}

h1 {
    color: #333;
}

p {
    color: #666;
}
# Use an official Python runtime as a parent image
FROM python:3.9-slim

# Set the working directory in the container
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install the required Python packages
RUN pip install --no-cache-dir -r requirements.txt

# Expose the port Flask runs on
EXPOSE 5000

# Run the application
CMD ["python", "app.py"]
docker build -t flask-web-app .
docker run -p 5000:5000 flask-web-app
sudo apt install python3 -y
sudo apt install python3-pip -y
pip install Flask

