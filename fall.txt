<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Event Management</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f4f4f9;
            color: #333;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        h1, h2 {
            color: #4CAF50;
            text-align: center;
        }

        .container {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 80%;
            max-width: 1000px;
        }

        form {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }

        form input, form button {
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        form input[type="file"] {
            border: none;
        }

        form button {
            background-color: #4CAF50;
            color: white;
            cursor: pointer;
            border: none;
            grid-column: span 2;
        }

        form button:hover {
            background-color: #45a049;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        table th, table td {
            padding: 12px;
            text-align: left;
            border: 1px solid #ddd;
        }

        table th {
            background-color: #f1f1f1;
        }

        table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        table tr:hover {
            background-color: #f1f1f1;
        }

        button {
            padding: 5px 10px;
            font-size: 14px;
            color: white;
            border: none;
            background-color: #007BFF;
            border-radius: 4px;
            cursor: pointer;
        }

        button:hover {
            background-color: #0056b3;
        }

        button:active {
            background-color: #00408d;
        }

        @media (max-width: 768px) {
            form {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Event Management</h1>
        <h2>Add/Update Event</h2>
        <form id="eventForm" enctype="multipart/form-data">
            <input type="hidden" id="eventId">
            <label for="name">Name:</label>
            <input type="text" id="name" name="name" required>

            <label for="phone">Phone:</label>
            <input type="text" id="phone" name="phone" required>

            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required>

            <label for="eventName">Event Name:</label>
            <input type="text" id="eventName" name="eventName" required>

            <label for="eventDate">Event Date:</label>
            <input type="date" id="eventDate" name="eventDate" required>

            <label for="doc">Upload Document:</label>
            <input type="file" id="doc" name="doc">

            <button type="submit">Submit</button>
        </form>

        <h2>Event List</h2>
        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Phone</th>
                    <th>Email</th>
                    <th>Event Name</th>
                    <th>Event Date</th>
                    <th>Document</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="eventList"></tbody>
        </table>
    </div>

    <script>
        async function fetchEvents() {
            const response = await fetch('/api/events');
            const events = await response.json();
            const eventList = document.getElementById('eventList');
            eventList.innerHTML = events.map(event => `
                <tr>
                    <td>${event.name}</td>
                    <td>${event.phone}</td>
                    <td>${event.email}</td>
                    <td>${event.eventName}</td>
                    <td>${event.eventDate}</td>
                    <td>${event.docUrl ? `<a href="${event.docUrl}" target="_blank">View Document</a>` : 'No Document'}</td>
                    <td>
                        <button onclick="editEvent(${event.id})">Edit</button>
                        <button onclick="deleteEvent(${event.id})">Delete</button>
                    </td>
                </tr>
            `).join('');
        }

        async function editEvent(id) {
            const response = await fetch(`/api/events/${id}`);
            const event = await response.json();
            document.getElementById('eventId').value = event.id;
            document.getElementById('name').value = event.name;
            document.getElementById('phone').value = event.phone;
            document.getElementById('email').value = event.email;
            document.getElementById('eventName').value = event.eventName;
            document.getElementById('eventDate').value = event.eventDate;
        }

        async function deleteEvent(id) {
            await fetch(`/api/events/${id}`, { method: 'DELETE' });
            fetchEvents();
        }

        document.getElementById('eventForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const id = document.getElementById('eventId').value;
            const method = id ? 'PUT' : 'POST';
            const url = id ? `/api/events/${id}` : '/api/events';

            await fetch(url, { method, body: formData });
            e.target.reset();
            fetchEvents();
        });

        fetchEvents();
    </script>
</body>
</html>

const express = require('express');
const multer = require('multer');
const bodyParser = require('body-parser');
const Dropbox = require('dropbox').Dropbox;
const fetch = require('isomorphic-fetch');
const path = require('path');

const app = express();
const port = 3000;
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'public')));
let events = [];
const dbx = new Dropbox({
    accessToken: 'sl.CBSdUma0o_92hGpmNpBc1XdQO7A8kAKt68fiiMtWjssOKFIZbnstCOa8amN1f-kUpjKUXp20BfvE__lBwdy5RyOnPppNRWPzPnacJ2eWA7qlY0aFG8JyxB_iyO6UEY8ulRQKhG7Oubjhjr78CD8HGNA',
    fetch: fetch,
});
const storage = multer.memoryStorage();
const upload = multer({ storage });
app.get('/api/events', (req, res) => {
    res.json(events);
});
app.get('/api/events/:id', (req, res) => {
    const id = parseInt(req.params.id);
    const event = events.find(e => e.id === id);
    if (event) {
        res.json(event);
    } else {
        res.status(404).send('Event not found');
    }
});
app.post('/api/events', upload.single('doc'), async (req, res) => {
    const { name, phone, email, eventName, eventDate } = req.body;
    if (!name || !phone || !email || !eventName || !eventDate) {
        return res.status(400).send('All fields are required.');
    }
    let docUrl = null;
    if (req.file) {
        try {
            const dropboxPath = `/EventDocs/${req.file.originalname}`;
            const response = await dbx.filesUpload({
                path: dropboxPath,
                contents: req.file.buffer,
            });
            const sharedLink = await dbx.sharingCreateSharedLink({
                path: response.result.path_display,
            });
            docUrl = sharedLink.result.url.replace('?dl=0', '?raw=1');
        } catch (error) {
            console.error('Error uploading file to Dropbox:', error);
            return res.status(500).json({ message: 'File upload failed' });
        }
    }
    const event = {
        id: events.length ? events[events.length - 1].id + 1 : 1,
        name,
        phone,
        email,
        eventName,
        eventDate,
        docUrl,
    };

    events.push(event);
    res.status(201).json(event);
});
app.put('/api/events/:id', upload.single('doc'), async (req, res) => {
    const id = parseInt(req.params.id);
    const eventIndex = events.findIndex(e => e.id === id);
    if (eventIndex === -1) {
        return res.status(404).send('Event not found');
    }

    const { name, phone, email, eventName, eventDate } = req.body;
    let docUrl = events[eventIndex].docUrl; 
    if (req.file) {
        try {
            const dropboxPath = `/EventDocs/${req.file.originalname}`;
            const response = await dbx.filesUpload({
                path: dropboxPath,
                contents: req.file.buffer,
            });
            const sharedLink = await dbx.sharingCreateSharedLink({
                path: response.result.path_display,
            });
            docUrl = sharedLink.result.url.replace('?dl=0', '?raw=1');
        } catch (error) {
            console.error('Error uploading file to Dropbox:', error);
            return res.status(500).json({ message: 'File upload failed' });
        }
    }
    const updatedEvent = {
        id,
        name: name || events[eventIndex].name,
        phone: phone || events[eventIndex].phone,
        email: email || events[eventIndex].email,
        eventName: eventName || events[eventIndex].eventName,
        eventDate: eventDate || events[eventIndex].eventDate,
        docUrl,
    };

    events[eventIndex] = updatedEvent;
    res.json(updatedEvent);
});
app.delete('/api/events/:id', (req, res) => {
    const id = parseInt(req.params.id);
    const index = events.findIndex(e => e.id === id);
    if (index === -1) {
        return res.status(404).send('Event not found');
    }
    events.splice(index, 1);
    res.send(`Event with ID ${id} deleted`);
});
app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});
